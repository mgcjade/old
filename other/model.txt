// model
{
    // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "Print to console": {
        "scope": "cpp",
        "prefix": "model",
        "body": [
            "#include <bits/stdc++.h>",
            "#define fre(x) freopen(#x \".in\", \"r\", stdin), freopen(#x \".out\", \"w\", stdout)",
            "using namespace std;",
            "typedef long long ll;",
            "",
            "const int N = 1e6;",
            "const int INF = 0x3f3f3f3f;",
            "const int MOD = 1e9 + 7;",
            "",
            "int main()",
            "{",
            "\t$0",
            "\treturn 0;",
            "}"
        ],
        "description": "cpp"
    }
}

// read
{
    // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "Print to console": {
        "scope": "cpp",
        "prefix": "read",
        "body": [
            "template<class _Tp>",
            "void read(_Tp &s)",
            "{",
            "\ts = 0;",
            "\tchar ch = getchar(), last = ' ';",
            "\twhile (ch < '0' || ch > '9')",
            "\t\tlast = ch, ch = getchar();",
            "\twhile (ch >= '0' && ch <= '9')",
            "\t\ts = (s << 3) + (s << 1) + (ch ^ 48), ch = getchar();",
            "\tif (last == '-')",
            "\t\ts = -s;",
            "}"
        ],
        "description": "cpp"
    }
}

// wrtie
{
    // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "Print to console": {
        "scope": "cpp",
        "prefix": "write",
        "body": [
            "template <class _Tp>",
            "void write(_Tp s)",
            "{",
            "\tif (s < 0)",
            "\t\tputchar('-'), s = -s;",
            "\t_Tp y = 10;",
            "\tint len = 1;",
            "\twhile (y <= s)",
            "\t\ty *= 10, len++;",
            "\twhile (len--)",
            "\t{",
            "\t\ty /= 10;",
            "\t\tputchar(s / y + 48);",
            "\t\ts %= y;",
            "\t}",
            "}"
        ],
        "description": "cpp"
    }
}

// fastcin
{
    // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "Print to console": {
        "scope": "cpp",
        "prefix": "fastcin",
        "body": [
            "ios::sync_with_stdio(0);",
            "cin.tie(0);",
            "cout.tie(0);",
            "$0"
        ],
        "description": "cpp"
    }
}